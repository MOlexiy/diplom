# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M2N6Q_XqTKHkRUglfgE2AL143-cBZATT
"""

import matplotlib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import openpyxl
from sklearn.preprocessing import PolynomialFeatures

matplotlib.style.use('ggplot')
from openpyxl import load_workbook

from sklearn.linear_model import LinearRegression

YearListElectric = []  # 2018 - 2021
YearListWeather = []  # 2017 - 2021
ind = 0

#wb = load_workbook("./hourlyConsumptionInAprilshort.xlsx")
wb = load_workbook("./hourlyConsumptionInApril.xlsx")

sheet_1 = wb.worksheets[0]  # electric excel table
sheet_2 = wb.worksheets[1]  # weather excel table
sheet_3 = wb.worksheets[2]  # weather 2 excel table

# !pip install locale

# запись с екселя по месяцам електрики
# Read Electric in Excel
# (number of month, number of month start in excel, number of year, number of year start in excel)
def ReadAndWriteExlTZ(nom, mstart, year, ystart):
    a = 30
    diffYear = year - ystart  # разница годов
    diffMonth = nom - mstart + (12 * diffYear)  # разница месяцев тк 4 2018 начинаеться а 3 2019 заканчиваеться
    multiple = diffMonth * a  
    for cow in range(1, 31):
        for row in range(4 + multiple, 28 + multiple):
            enterArray = []
            if sheet_1[row][cow].value is not None:
                enterArray.append(round(sheet_1[row][cow].value, 1))
                YearListElectric.extend(enterArray)


# (number of month, number of month start in excel, number of year, number of year start in excel)
def ReadAndWriteExlTO(nom, mstart, year, ystart):
    a = 30
    diffYear = year - ystart
    diffMonth = nom - mstart + (12 * diffYear)
    multiple = diffMonth * a
    for cow in range(1, 32):
        for row in range(4 + multiple, 28 + multiple):
            enterArray = []
            if sheet_1[row][cow].value is not None:
                enterArray.append(round(sheet_1[row][cow].value, 1))
                YearListElectric.extend(enterArray)


# (number of month, number of month start in excel, number of year, number of year start in excel)
def ReadAndWriteExlTE(nom, mstart, year, ystart):
    a = 30
    # if year is a leap year
    if year % 4 == 0:
        diffYear = year - ystart
        diffMonth = nom - mstart + (12 * diffYear)
        multiple = diffMonth * a
        for cow in range(1, 30):
            for row in range(4 + multiple, 28 + multiple):
                enterArray = []
                if sheet_1[row][cow].value is not None:
                    enterArray.append(round(sheet_1[row][cow].value, 1))
                    YearListElectric.extend(enterArray)
    else:
        diffYear = year - ystart
        diffMonth = nom - mstart + (12 * diffYear)
        multiple = diffMonth * a
        for cow in range(1, 29):
            for row in range(4 + multiple, 28 + multiple):
                enterArray = []
                if sheet_1[row][cow].value is not None:
                    enterArray.append(round(sheet_1[row][cow].value, 1))
                    YearListElectric.extend(enterArray)


# End read Electric
def EnterElectric(nom, mstart, year, ystart):
    if nom == 4 or nom == 6 or nom == 9 or nom == 11:
        ReadAndWriteExlTZ(nom, mstart, year, ystart)
    elif nom == 2:
        ReadAndWriteExlTE(nom, mstart, year, ystart)
    else:
        ReadAndWriteExlTO(nom, mstart, year, ystart)


# month start in excel, month end in excel,year start in excel, year end in excel
def Enter(mstart, monthEnd, ystart, yEnd):
    year = ystart
    diffyear = yEnd - ystart
    coef = (diffyear * 12) + monthEnd + 1
    count = 0
    for mon in range(mstart, coef):
        nom = mon
        if mon > 12 + 12 * count:
            nom = mon - 12 * (count + 1)
            if mon == 13 + 12 * count:
                year += 1
            if mon == 24 + 12 * count:
                count += 1
        EnterElectric(nom, mstart, year, ystart)
    return YearListElectric

# Read Weather in Excel
# number of month number of month start in excel number of year number of year start in excel count day in month
def ReadAndWriteExlWT(coun, norow):
    timeline = 0
    coun += 3
    norow += 3
    print(coun)
    print(norow)
    for row in range(coun, norow):
        enterArray = []
        if row == coun:
            if sheet_2[row][1].value is not None:
                temp = round(sheet_2[row][1].value, 1)
                n = sheet_2[row][5].value
                enterArray.append([temp, n])
        else:
            if sheet_2[row][1].value is not None:
                temp = round(sheet_2[row][1].value, 1)
                n = sheet_2[row][5].value
                temp0 = YearListWeather[timeline][0]
                m2 = round(temp0 / 3 + 2 * temp / 3, 1)
                m1 = round(2 * temp0 / 3 + temp / 3, 1)
                enterArray.append([m1, n])
                enterArray.append([m2, n])
                enterArray.append([temp, n])
                timeline += 3
                if row == norow - 1:
                    tn = round((2 * temp - m2), 1)
                    tn2 = round((2 * tn - temp) , 1)
                    enterArray.append([tn, n])
                    enterArray.append([tn2, n])
        YearListWeather.extend(enterArray)


def EnterWeather(mstart, nom, mEnd, ystart, year, yEnd):
    coun = 0
    norow = 0
    diffYear = year - ystart
    diffMonth = nom - mstart + (12 * diffYear)
    yearNow = ystart
    count = 0
    for m in range(mstart, diffMonth + 1):
        n = m
        if n > 12 + 12 * count:
            n = n - 12 * (count + 1)
            if m == (13 + 12 * count):
                yearNow += 1
            if m == (24 + 12 * count):
                count += 1
        if n == 4 or n == 6 or n == 9 or n == 11:
            dCof = 30
        elif n == 2:
            if yearNow % 4 == 0:
                dCof = 29
            else:
                dCof = 28
        else:
            dCof = 31 
        coun += (dCof * 8)
    diffYear = yEnd - ystart
    diffMonth = mEnd - mstart + (12 * diffYear)
    yearNow = ystart
    count = 0
    for n in range(mstart, diffMonth + 1):
        m = n
        if m > 12 + 12 * count:
            m = m - 12 * (count + 1)
            if n == (13 + 12 * count):
                yearNow += 1
            if n == (24 + 12 * count):
                count += 1
        if m == 4 or m == 6 or m == 9 or m == 11:
            dCof = 30
        elif m == 2:
            if yearNow % 4 == 0:
                dCof = 29
            else:
                dCof = 28
        else:
            dCof = 31
        norow += (dCof * 8)
    ind = norow - coun - 1
    ReadAndWriteExlWT(coun, norow)
    return(ind)


def EnterWeatherInd(mstart, nom, mEnd, ystart, year, yEnd):
    coun = 0
    norow = 0
    diffYear = year - ystart
    diffMonth = nom - mstart + (12 * diffYear)
    yearNow = ystart
    count = 0
    for m in range(mstart, diffMonth + 1):
        n = m
        if n > 12 + 12 * count:
            n = n - 12 * (count + 1)
            if m == (13 + 12 * count):
                yearNow += 1
            if m == (24 + 12 * count):
                count += 1
        if n == 4 or n == 6 or n == 9 or n == 11:
            dCof = 30
        elif n == 2:
            if yearNow % 4 == 0:
                dCof = 29
            else:
                dCof = 28
        else:
            dCof = 31 
        coun += (dCof * 8)
    diffYear = yEnd - ystart
    diffMonth = mEnd - mstart + (12 * diffYear)
    yearNow = ystart
    count = 0
    for n in range(mstart, diffMonth + 1):
        m = n
        if m > 12 + 12 * count:
            m = m - 12 * (count + 1)
            if n == (13 + 12 * count):
                yearNow += 1
            if n == (24 + 12 * count):
                count += 1
        if m == 4 or m == 6 or m == 9 or m == 11:
            dCof = 30
        elif m == 2:
            if yearNow % 4 == 0:
                dCof = 29
            else:
                dCof = 28
        else:
            dCof = 31
        norow += (dCof * 8)
    ind = norow - coun
    return(ind)

def ReadWeather():
    doc = openpyxl.load_workbook("./UKKK.01.04.2018.28.03.2021.1.0.0.ru.utf8.00000000.xlsx")
    sheet = doc.active
    valid_rows=[]
    for row in sheet.iter_rows(min_row=8, max_row=sheet.max_row, min_col=1, max_col=13, values_only=True):
        if any(row):
            if isinstance(row[0], datetime) and row[0].minute == 0:
                    valid_rows.append({'date': row[0],
                               'temp': float(row[1]),
                               'DD': row[5],
                               'Ff': int(row[6]),
                               'ff10': row[7],
                               'WW': row[8],
                               'c': row[10],
                               'VV': row[11],
                              })
    return valid_rows

weather_all,*other = ReadWeather()

AllElectric = []
YearListElectric.clear()
AllElectric.append(Enter(4, 5, 2018, 2019))
print(AllElectric)

FourMonthEl = []
YearListElectric.clear()
FourMonthEl.append(Enter(4, 4, 2018, 2018))
print(FourMonthEl)

WeatherList = []
YearListWeather.clear()
mstart = 1 
nom = 4 
mEnd = 6 
ystart = 2017 
year = 2018
yEnd = 2019
WeatherList.append(EnterWeather(mstart, nom, mEnd, ystart, year, yEnd))
ind = EnterWeatherInd(mstart, nom, mEnd, ystart, year, yEnd)
print(WeatherList)

List = []
ind = ind * 3

math0 = 0
math1 = 0
ListE = []
ListW = []
index = 0
count = 0
for index in range (ind):
    if count < 24:
        math0 = math0 + AllElectric[0][index]
        math1 = math1 + YearListWeather[index][0]
        count += 1
    if count == 24:
        math0 = round(math0 / 24, 1)
        math1 = round(math1 / 24, 1)
        ListE.append(math0)
        ListW.append(math1)
        count = 0
print(ListE)
print(ListW)
y0 = np.array(ListE)
x0 = np.array(ListW)

plt.scatter(x0, y0, color='red')
plt.show()

for i in range(ind):
    List.append(YearListWeather[i][0])
x = np.array(List).reshape((-1, 1))
y = np.array(AllElectric)
List.clear()

# Step 2b: Transform input data
transformer = PolynomialFeatures(degree=5, include_bias=False)
transformer.fit(x)
x_ = transformer.transform(x)
# Step 3: Create a model and fit it
models = LinearRegression().fit(x_, y[0])
# Step 4: Get results
r_sq = models.score(x_, y[0])
# Step 5: Predict
y_pred = models.predict(x_)

plt.scatter(x, y_pred, color='red', s=2)
plt.scatter(x, y, color='blue', s=2)
plt.show()

model = LinearRegression()
model.fit(x, y[0])
model = LinearRegression().fit(x, y[0])
r_sq = model.score(x, y[0])
new_model = LinearRegression().fit(x, y.reshape((-1, 1)))
y_pred = model.predict(x)
y_pred = model.intercept_ + model.coef_ * x

plt.scatter(x, y_pred, color='red', s=2)
plt.scatter(x, y, color='blue', s=2)
plt.show()

ListE1 = []
ListW1 = []
ListE2 = []
ListW2 = []
ListE3 = []
ListW3 = []

math00 = 0  # el on 24-6 hours
math01 = 0  # weather on 24-6 hours
math10 = 0  # el on 10-16 hours
math11 = 0  # weather on 10-16 hours
math0 = 0  # el on 15-22 hours
math1 = 0  # weather on 15-22 hours
ListE1.clear()
ListW1.clear()
ListE2.clear()
ListW2.clear()
ListE3.clear()
ListW3.clear()
index = 0
count = 0
for index in range (ind):
    if count < 24:
        if count < 7:
            math00 = math00 + AllElectric[0][index]
            math01 = math01 + YearListWeather[index][0]
        if 10 <= count <= 15:
            math10 = math10 + AllElectric[0][index]
            math11 = math11 + YearListWeather[index][0]
        if 15 <= count <= 21:
            math0 = math0 + AllElectric[0][index]
            math1 = math1 + YearListWeather[index][0]
        count += 1
    if count == 24:
        math00 = round(math00 / 6, 1)  # round 1
        math01 = round(math01 / 6, 1)  # round 1
        ListE1.append(math00)
        ListW1.append(math01)
        math10 = round(math10 / 6, 1)  # round 1
        math11 = round(math11 / 6, 1)  # round 1
        ListE2.append(math10)
        ListW2.append(math11)
        math0 = round(math0 / 6, 1)  # round 1
        math1 = round(math1 / 6, 1)  # round 1
        ListE3.append(math0)
        ListW3.append(math1)
        count = 0
y06 = np.array(ListE1)
x06 = np.array(ListW1).reshape((-1, 1))
y1016 = np.array(ListE2)
x1016 = np.array(ListW2).reshape((-1, 1))
y1522 = np.array(ListE3)
x1522 = np.array(ListW3).reshape((-1, 1))

transformer = PolynomialFeatures(degree=5, include_bias=False)
transformer.fit(x06)
x0_ = transformer.transform(x06)
models = LinearRegression().fit(x0_, y06)
r_sq = models.score(x0_, y06)
y_pred0 = models.predict(x0_)
#
transformer.fit(x1016)
x0_ = transformer.transform(x1016)
models = LinearRegression().fit(x0_, y1016)
r_sq = models.score(x0_, y1016)
y_pred1 = models.predict(x0_)
#
transformer.fit(x1522)
x0_ = transformer.transform(x1522)
models = LinearRegression().fit(x0_, y1522)
r_sq = models.score(x0_, y1522)
y_pred2 = models.predict(x0_)

plt.scatter(x06, y06, color='red', s=10)  # 0-6 hours
plt.scatter(x1016, y1016, color='orange', s=10)  # 10-16 hours
plt.scatter(x1522, y1522, color='blue', s=10)  # 15-22 hours
plt.scatter(x06, y_pred0, c = 'Cyan', s=10)  # 0-6 hours
plt.scatter(x1016, y_pred1, c = 'Magenta', s=10)  # 10-16 hours
plt.scatter(x1522, y_pred2, color='green', s=10)  # 15-22 hours
plt.show()

plt.scatter(x06, y06, color='red')  # 0-6 hours
plt.scatter(x1016, y1016, color='yellow')  # 10-16 hours
plt.scatter(x1522, y1522, color='blue')  # 15-22 hours
plt.show()

plt.scatter(x, y, color='red')
plt.show()

math000001 = 0  # el on 24/00-3/4 hours
math000002 = 0  # weather on 24/00-3/4 hours
math00001 = 0  # el on 3/4-6/7 hours
math00002 = 0  # weather on 3/4-6/7 hours
math0001 = 0  # el on 10/11-13/14 hours
math0002 = 0  # weather on 10/11-13/14 hours
math001 = 0  # el on 13/14-16/17 hours
math002 = 0  # weather on 13/14-16/17 hours
math01 = 0  # el on 16/17-19/20 hours
math02 = 0  # weather on 16/17-19/20 hours
math1 = 0  # el on 19/20-21/22 hours
math2 = 0  # weather on 19/20-21/22 hours
ListEl1 = []
ListWl1 = []
ListEl2 = []
ListWl2 = []
ListEl3 = []
ListWl3 = []
ListEl4 = []
ListWl4 = []
ListEl5 = []
ListWl5 = []
ListEl6 = []
ListWl6 = []
ListEWork = []  # List of electric on work day
ListWWork = []  # List of weather on work day
ListEFrid = []  # List of electric on friday
ListWFrid = []  # List of weather on friday
ListEWek = []  # List of electric on weekend
ListWWek = []  # List of weather on weekend

ListEl1.clear()
ListWl1.clear()
ListEl2.clear()
ListWl2.clear()
ListEl3.clear()
ListWl3.clear()
ListEl4.clear()
ListWl4.clear()
ListEl5.clear()
ListWl5.clear()
ListEl6.clear()
ListWl6.clear()
ListEWork.clear()
ListWWork.clear()
ListEFrid.clear()
ListWFrid.clear()
ListEWek.clear()
ListWWek.clear()
indWork = 0
indFriday = 0
indWeek = 0
index = 0
count = 0
indx = 0
countweek = 7
for index in range (ind):
    if count < 24:
        if count < 4:
            math000001 = math000001 + AllElectric[0][index]
            math000002 = math000002 + YearListWeather[index][0]
        if 3 <= count <= 6:
            math00001 = math00001 + AllElectric[0][index]
            math00002 = math00002 + YearListWeather[index][0]
        if 10 <= count <= 13:
            math0001 = math0001 + AllElectric[0][index]
            math0002 = math0002 + YearListWeather[index][0]
        if 13 <= count <= 16:
            math001 = math001 + AllElectric[0][index]
            math002 = math002 + YearListWeather[index][0]
        if 16 <= count <= 19:
            math01 = math01 + AllElectric[0][index]
            math02 = math02 + YearListWeather[index][0]
        if 19 <= count <= 21:
            math1 = math1 + AllElectric[0][index]
            math2 = math2 + YearListWeather[index][0]
        count += 1
    if count == 24:
        math000001 = round(math000001 / 4, 1)  # round 1
        math000002 = round(math000002 / 4, 1)  # round 1
        ListEl1.append(math000001)
        ListWl1.append(math000002)
        math00001 = round(math00001 / 4, 1)  # round 1
        math00002 = round(math00002 / 4, 1)  # round 1
        ListEl2.append(math00001)
        ListWl2.append(math00002)
        math0001 = round(math0001 / 4, 1)  # round 1
        math0002 = round(math0002 / 4, 1)  # round 1
        ListEl3.append(math0001)
        ListWl3.append(math0002)
        math001 = round(math001 / 4, 1)  # round 1
        math002 = round(math002 / 4, 1)  # round 1
        ListEl4.append(math001)
        ListWl4.append(math002)
        math01 = round(math01 / 4, 1)  # round 1
        math02 = round(math02 / 4, 1)  # round 1
        ListEl5.append(math01)
        ListWl5.append(math02)
        math1 = round(math1 / 3, 1)  # round 1
        math2 = round(math2 / 3, 1)  # round 1
        ListEl6.append(math1)
        ListWl6.append(math2)
        if 1 <= countweek <= 4:
            ListEWork.extend(ListEl1)
            ListWWork.extend(ListWl1)
            ListEWork.extend(ListEl2)
            ListWWork.extend(ListWl2)
            ListEWork.extend(ListEl3)
            ListWWork.extend(ListWl3)
            ListEWork.extend(ListEl4)
            ListWWork.extend(ListWl4)
            ListEWork.extend(ListEl5)
            ListWWork.extend(ListWl5)
            ListEWork.extend(ListEl6)
            ListWWork.extend(ListWl6)
            indWork += 1
            countweek += 1
        if countweek == 5:
            ListEFrid.extend(ListEl1)
            ListWFrid.extend(ListWl1)
            ListEFrid.extend(ListEl2)
            ListWFrid.extend(ListWl2)
            ListEFrid.extend(ListEl3)
            ListWFrid.extend(ListWl3)
            ListEFrid.extend(ListEl4)
            ListWFrid.extend(ListWl4)
            ListEFrid.extend(ListEl5)
            ListWFrid.extend(ListWl5)
            ListEFrid.extend(ListEl6)
            ListWFrid.extend(ListWl6)
            indFriday += 1
            countweek += 1
        if 6 <= countweek <= 7:
            ListEWek.extend(ListEl1)
            ListWWek.extend(ListWl1)
            ListEWek.extend(ListEl2)
            ListWWek.extend(ListWl2)
            ListEWek.extend(ListEl3)
            ListWWek.extend(ListWl3)
            ListEWek.extend(ListEl4)
            ListWWek.extend(ListWl4)
            ListEWek.extend(ListEl5)
            ListWWek.extend(ListWl5)
            ListEWek.extend(ListEl6)
            ListWWek.extend(ListWl6)
            indWeek += 1
            countweek += 1
        if countweek == 8:
            countweek = 1
        ListEl1.clear()
        ListWl1.clear()
        ListEl2.clear()
        ListWl2.clear()
        ListEl3.clear()
        ListWl3.clear()
        ListEl4.clear()
        ListWl4.clear()
        ListEl5.clear()
        ListWl5.clear()
        ListEl6.clear()
        ListWl6.clear()
        count = 0

ListOne01 = []
ListOne02 = []
ListOne03 = []
ListOne04 = []
ListOne05 = []
ListOne06 = []
ListOne11 = []
ListOne12 = []
ListOne13 = []
ListOne14 = []
ListOne15 = []
ListOne16 = []
ListTwo01 = []
ListTwo02 = []
ListTwo03 = []
ListTwo04 = []
ListTwo05 = []
ListTwo06 = []
ListTwo11 = []
ListTwo12 = []
ListTwo13 = []
ListTwo14 = []
ListTwo15 = []
ListTwo16 = []
ListTree01 = []
ListTree02 = []
ListTree03 = []
ListTree04 = []
ListTree05 = []
ListTree06 = []
ListTree11 = []
ListTree12 = []
ListTree13 = []
ListTree14 = []
ListTree15 = []
ListTree16 = []
indWork = indWork * 6
indFriday = indFriday * 6
indWeek = indWeek * 6

ListOne01.clear()
ListOne02.clear()
ListOne03.clear()
ListOne04.clear()
ListOne05.clear()
ListOne06.clear()
ListOne11.clear()
ListOne12.clear()
ListOne13.clear()
ListOne14.clear()
ListOne15.clear()
ListOne16.clear()
oneind = 0
i = 0
for oneind in range(indWork):
    if i == 0:
        ListOne01.append(ListEWork[oneind])
        ListOne11.append(ListWWork[oneind])
    if i == 1:
        ListOne02.append(ListEWork[oneind])
        ListOne12.append(ListWWork[oneind])
    if i == 2:
        ListOne03.append(ListEWork[oneind])
        ListOne13.append(ListWWork[oneind])
    if i == 3:
        ListOne04.append(ListEWork[oneind])
        ListOne14.append(ListWWork[oneind])
    if i == 4:
        ListOne05.append(ListEWork[oneind])
        ListOne15.append(ListWWork[oneind])
    if i == 5:
        ListOne06.append(ListEWork[oneind])
        ListOne16.append(ListWWork[oneind])
    i += 1
    if i == 6:
        i = 0
yyy03 = np.array(ListOne01)
xxx03 = np.array(ListOne11).reshape((-1, 1))
yyy36 = np.array(ListOne02)
xxx36 = np.array(ListOne12).reshape((-1, 1))
yyy1013 = np.array(ListOne03)
xxx1013 = np.array(ListOne13).reshape((-1, 1))
yyy1316 = np.array(ListOne04)
xxx1316 = np.array(ListOne14).reshape((-1, 1))
yyy1619 = np.array(ListOne05)
xxx1619 = np.array(ListOne15).reshape((-1, 1))
yyy1921 = np.array(ListOne06)
xxx1921 = np.array(ListOne16).reshape((-1, 1))

transformer = PolynomialFeatures(degree=5, include_bias=False)
transformer.fit(xxx03)
x0_ = transformer.transform(xxx03)
models = LinearRegression().fit(x0_, yyy03)
r_sq = models.score(x0_, yyy03)
y_pred000 = models.predict(x0_)
#
transformer.fit(xxx36)
x0_ = transformer.transform(xxx36)
models = LinearRegression().fit(x0_, yyy36)
r_sq = models.score(x0_, yyy36)
y_pred001 = models.predict(x0_)
#
transformer.fit(xxx1013)
x0_ = transformer.transform(xxx1013)
models = LinearRegression().fit(x0_, yyy1013)
r_sq = models.score(x0_, yyy1013)
y_pred002 = models.predict(x0_)
#
transformer.fit(xxx1316)
x0_ = transformer.transform(xxx1316)
models = LinearRegression().fit(x0_, yyy1316)
r_sq = models.score(x0_, yyy1316)
y_pred003 = models.predict(x0_)
#
transformer.fit(xxx1619)
x0_ = transformer.transform(xxx1619)
models = LinearRegression().fit(x0_, yyy1619)
r_sq = models.score(x0_, yyy1619)
y_pred004 = models.predict(x0_)
#
transformer.fit(xxx1921)
x0_ = transformer.transform(xxx1921)
models = LinearRegression().fit(x0_, yyy1921)
r_sq = models.score(x0_, yyy1921)
y_pred005 = models.predict(x0_)

plt.scatter(xxx03, yyy03, color='Magenta', s = 10)  # 0-3 hours
plt.scatter(xxx36, yyy36, color='OrangeRed', s = 10)  # 3-6 hours
plt.scatter(xxx1013, yyy1013, color='DarkSalmon', s = 10)  # 10-13 hours
plt.scatter(xxx1316, yyy1316, color='Blue', s = 10)  # 13-16 hours
plt.scatter(xxx1619, yyy1619, color='Red', s = 10)  # 16-19 hours
plt.scatter(xxx1921, yyy1921, color='Pink', s = 10)  # 19-21 hours
#
plt.scatter(xxx03, y_pred000, color='GreenYellow', s = 10)  # 0-3 hours
plt.scatter(xxx36, y_pred001, color='Lime', s = 10)  # 3-6 hours
plt.scatter(xxx1013, y_pred002, color='LimeGreen', s = 10)  # 10-13 hours
plt.scatter(xxx1316, y_pred003, color='SpringGreen', s = 10)  # 13-16 hours
plt.scatter(xxx1619, y_pred004, color='SeaGreen', s = 10)  # 16-19 hours
plt.scatter(xxx1921, y_pred005, color='Olive', s = 10)  # 19-21 hours
plt.show()

ListTwo01.clear()
ListTwo02.clear()
ListTwo03.clear()
ListTwo04.clear()
ListTwo05.clear()
ListTwo06.clear()
ListTwo11.clear()
ListTwo12.clear()
ListTwo13.clear()
ListTwo14.clear()
ListTwo15.clear()
ListTwo16.clear()
oneind = 0
i = 0
for oneind in range(indFriday):
    if i == 0:
        ListTwo01.append(ListEFrid[oneind])
        ListTwo11.append(ListWFrid[oneind])
    if i == 1:
        ListTwo02.append(ListEFrid[oneind])
        ListTwo12.append(ListWFrid[oneind])
    if i == 2:
        ListTwo03.append(ListEFrid[oneind])
        ListTwo13.append(ListWFrid[oneind])
    if i == 3:
        ListTwo04.append(ListEFrid[oneind])
        ListTwo14.append(ListWFrid[oneind])
    if i == 4:
        ListTwo05.append(ListEFrid[oneind])
        ListTwo15.append(ListWFrid[oneind])
    if i == 5:
        ListTwo06.append(ListEFrid[oneind])
        ListTwo16.append(ListWFrid[oneind])
    i += 1
    if i == 6:
        i = 0
y03 = np.array(ListTwo01)
x03 = np.array(ListTwo11).reshape((-1, 1))
y36 = np.array(ListTwo02)
x36 = np.array(ListTwo12).reshape((-1, 1))
y1013 = np.array(ListTwo03)
x1013 = np.array(ListTwo13).reshape((-1, 1))
y1316 = np.array(ListTwo04)
x1316 = np.array(ListTwo14).reshape((-1, 1))
y1619 = np.array(ListTwo05)
x1619 = np.array(ListTwo15).reshape((-1, 1))
y1921 = np.array(ListTwo06)
x1921 = np.array(ListTwo16).reshape((-1, 1))

transformer = PolynomialFeatures(degree=5, include_bias=False)
transformer.fit(x03)
x0_ = transformer.transform(x03)
models = LinearRegression().fit(x0_, y03)
r_sq = models.score(x0_, y03)
y_pred00 = models.predict(x0_)
#
transformer.fit(x36)
x0_ = transformer.transform(x36)
models = LinearRegression().fit(x0_, y36)
r_sq = models.score(x0_, y36)
y_pred01 = models.predict(x0_)
#
transformer.fit(x1013)
x0_ = transformer.transform(x1013)
models = LinearRegression().fit(x0_, y1013)
r_sq = models.score(x0_, y1013)
y_pred02 = models.predict(x0_)
#
transformer.fit(x1316)
x0_ = transformer.transform(x1316)
models = LinearRegression().fit(x0_, y1316)
r_sq = models.score(x0_, y1316)
y_pred03 = models.predict(x0_)
#
transformer.fit(x1619)
x0_ = transformer.transform(x1619)
models = LinearRegression().fit(x0_, y1619)
r_sq = models.score(x0_, y1619)
y_pred04 = models.predict(x0_)
#
transformer.fit(x1921)
x0_ = transformer.transform(x1921)
models = LinearRegression().fit(x0_, y1921)
r_sq = models.score(x0_, y1921)
y_pred05 = models.predict(x0_)

plt.scatter(x03, y03, color='Magenta', s = 10)  # 0-3 hours
plt.scatter(x36, y36, color='OrangeRed', s = 10)  # 3-6 hours
plt.scatter(x1013, y1013, color='DarkSalmon', s = 10)  # 10-13 hours
plt.scatter(x1316, y1316, color='Blue', s = 10)  # 13-16 hours
plt.scatter(x1619, y1619, color='Red', s = 10)  # 16-19 hours
plt.scatter(x1921, y1921, color='Pink', s = 10)  # 19-21 hours
#
plt.scatter(x03, y_pred00, color='GreenYellow', s = 10)  # 0-3 hours
plt.scatter(x36, y_pred01, color='Lime', s = 10)  # 3-6 hours
plt.scatter(x1013, y_pred02, color='LimeGreen', s = 10)  # 10-13 hours
plt.scatter(x1316, y_pred03, color='SpringGreen', s = 10)  # 13-16 hours
plt.scatter(x1619, y_pred04, color='SeaGreen', s = 10)  # 16-19 hours
plt.scatter(x1921, y_pred05, color='Olive', s = 10)  # 19-21 hours
plt.show()

ListTree01.clear()
ListTree02.clear()
ListTree03.clear()
ListTree04.clear()
ListTree05.clear()
ListTree06.clear()
ListTree11.clear()
ListTree12.clear()
ListTree13.clear()
ListTree14.clear()
ListTree15.clear()
ListTree16.clear()
oneind = 0
i = 0
for oneind in range(indWeek):
    if i == 0:
        ListTree01.append(ListEWek[oneind])
        ListTree11.append(ListWWek[oneind])
    if i == 1:
        ListTree02.append(ListEWek[oneind])
        ListTree12.append(ListWWek[oneind])
    if i == 2:
        ListTree03.append(ListEWek[oneind])
        ListTree13.append(ListWWek[oneind])
    if i == 3:
        ListTree04.append(ListEWek[oneind])
        ListTree14.append(ListWWek[oneind])
    if i == 4:
        ListTree05.append(ListEWek[oneind])
        ListTree15.append(ListWWek[oneind])
    if i == 5:
        ListTree06.append(ListEWek[oneind])
        ListTree16.append(ListWWek[oneind])
    i += 1
    if i == 6:
        i = 0
yy03 = np.array(ListTree01)
xx03 = np.array(ListTree11).reshape((-1, 1))
yy36 = np.array(ListTree02)
xx36 = np.array(ListTree12).reshape((-1, 1))
yy1013 = np.array(ListTree03)
xx1013 = np.array(ListTree13).reshape((-1, 1))
yy1316 = np.array(ListTree04)
xx1316 = np.array(ListTree14).reshape((-1, 1))
yy1619 = np.array(ListTree05)
xx1619 = np.array(ListTree15).reshape((-1, 1))
yy1921 = np.array(ListTree06)
xx1921 = np.array(ListTree16).reshape((-1, 1))

transformer = PolynomialFeatures(degree=5, include_bias=False)
transformer.fit(xx03)
x0_ = transformer.transform(xx03)
models = LinearRegression().fit(x0_, yy03)
r_sq = models.score(x0_, yy03)
y_pred0000 = models.predict(x0_)
#
transformer.fit(xx36)
x0_ = transformer.transform(xx36)
models = LinearRegression().fit(x0_, yy36)
r_sq = models.score(x0_, yy36)
y_pred0001 = models.predict(x0_)
#
transformer.fit(xx1013)
x0_ = transformer.transform(xx1013)
models = LinearRegression().fit(x0_, yy1013)
r_sq = models.score(x0_, yy1013)
y_pred0002 = models.predict(x0_)
#
transformer.fit(xx1316)
x0_ = transformer.transform(xx1316)
models = LinearRegression().fit(x0_, yy1316)
r_sq = models.score(x0_, yy1316)
y_pred0003 = models.predict(x0_)
#
transformer.fit(xx1619)
x0_ = transformer.transform(xx1619)
models = LinearRegression().fit(x0_, yy1619)
r_sq = models.score(x0_, yy1619)
y_pred0004 = models.predict(x0_)
#
transformer.fit(xx1921)
x0_ = transformer.transform(xx1921)
models = LinearRegression().fit(x0_, yy1921)
r_sq = models.score(x0_, yy1921)
y_pred0005 = models.predict(x0_)

plt.scatter(xx03, yy03, color='Magenta', s = 10)  # 0-3 hours
plt.scatter(xx36, yy36, color='OrangeRed', s = 10)  # 3-6 hours
plt.scatter(xx1013, yy1013, color='DarkSalmon', s = 10)  # 10-13 hours
plt.scatter(xx1316, yy1316, color='Blue', s = 10)  # 13-16 hours
plt.scatter(xx1619, yy1619, color='Red', s = 10)  # 16-19 hours
plt.scatter(xx1921, yy1921, color='Pink', s = 10)  # 19-21 hours
#
plt.scatter(xx03, y_pred0000, color='GreenYellow', s = 10)  # 0-3 hours
plt.scatter(xx36, y_pred0001, color='Lime', s = 10)  # 3-6 hours
plt.scatter(xx1013, y_pred0002, color='LimeGreen', s = 10)  # 10-13 hours
plt.scatter(xx1316, y_pred0003, color='SpringGreen', s = 10)  # 13-16 hours
plt.scatter(xx1619, y_pred0004, color='SeaGreen', s = 10)  # 16-19 hours
plt.scatter(xx1921, y_pred0005, color='Olive', s = 10)  # 19-21 hours
plt.show()